// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PlaylistView /> snapshot 1`] = `
.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 90%;
}

.c0 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  background-color: #0f0f0f;
  height: 100%;
}

.c4 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  height: 100%;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
}

.c1 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
}

.c2 {
  zoom: 0.1;
  padding-right: 10px;
}

<Playlist>
  <styled.div>
    <div
      className="c0"
    >
      <Header>
        <HideOnScroll>
          <ForwardRef(Slide)
            appear={false}
            direction="down"
            in={true}
          >
            <Transition
              appear={false}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              nodeRef={
                Object {
                  "current": .c0 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
}

.c1 {
  zoom: 0.1;
  padding-right: 10px;
}

<header
                    class="MuiPaper-root MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary mui-fixed MuiPaper-elevation4"
                  >
                    <div
                      class="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                    >
                      <div
                        class="c0"
                      >
                        <img
                          class="c1"
                          src="spotifood.png"
                        />
                      </div>
                      <button
                        class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                        tabindex="0"
                        type="button"
                      >
                        <span
                          class="MuiButton-label"
                        >
                          Logout
                        </span>
                        <span
                          class="MuiTouchRipple-root"
                        />
                      </button>
                    </div>
                  </header>,
                }
              }
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={
                Object {
                  "enter": 225,
                  "exit": 195,
                }
              }
              unmountOnExit={false}
            >
              <WithStyles(ForwardRef(AppBar))
                color="primary"
                style={
                  Object {
                    "visibility": undefined,
                  }
                }
              >
                <ForwardRef(AppBar)
                  classes={
                    Object {
                      "colorDefault": "MuiAppBar-colorDefault",
                      "colorInherit": "MuiAppBar-colorInherit",
                      "colorPrimary": "MuiAppBar-colorPrimary",
                      "colorSecondary": "MuiAppBar-colorSecondary",
                      "colorTransparent": "MuiAppBar-colorTransparent",
                      "positionAbsolute": "MuiAppBar-positionAbsolute",
                      "positionFixed": "MuiAppBar-positionFixed",
                      "positionRelative": "MuiAppBar-positionRelative",
                      "positionStatic": "MuiAppBar-positionStatic",
                      "positionSticky": "MuiAppBar-positionSticky",
                      "root": "MuiAppBar-root",
                    }
                  }
                  color="primary"
                  style={
                    Object {
                      "visibility": undefined,
                    }
                  }
                >
                  <WithStyles(ForwardRef(Paper))
                    className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary mui-fixed"
                    component="header"
                    elevation={4}
                    square={true}
                    style={
                      Object {
                        "visibility": undefined,
                      }
                    }
                  >
                    <ForwardRef(Paper)
                      className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary mui-fixed"
                      classes={
                        Object {
                          "elevation0": "MuiPaper-elevation0",
                          "elevation1": "MuiPaper-elevation1",
                          "elevation10": "MuiPaper-elevation10",
                          "elevation11": "MuiPaper-elevation11",
                          "elevation12": "MuiPaper-elevation12",
                          "elevation13": "MuiPaper-elevation13",
                          "elevation14": "MuiPaper-elevation14",
                          "elevation15": "MuiPaper-elevation15",
                          "elevation16": "MuiPaper-elevation16",
                          "elevation17": "MuiPaper-elevation17",
                          "elevation18": "MuiPaper-elevation18",
                          "elevation19": "MuiPaper-elevation19",
                          "elevation2": "MuiPaper-elevation2",
                          "elevation20": "MuiPaper-elevation20",
                          "elevation21": "MuiPaper-elevation21",
                          "elevation22": "MuiPaper-elevation22",
                          "elevation23": "MuiPaper-elevation23",
                          "elevation24": "MuiPaper-elevation24",
                          "elevation3": "MuiPaper-elevation3",
                          "elevation4": "MuiPaper-elevation4",
                          "elevation5": "MuiPaper-elevation5",
                          "elevation6": "MuiPaper-elevation6",
                          "elevation7": "MuiPaper-elevation7",
                          "elevation8": "MuiPaper-elevation8",
                          "elevation9": "MuiPaper-elevation9",
                          "outlined": "MuiPaper-outlined",
                          "root": "MuiPaper-root",
                          "rounded": "MuiPaper-rounded",
                        }
                      }
                      component="header"
                      elevation={4}
                      square={true}
                      style={
                        Object {
                          "visibility": undefined,
                        }
                      }
                    >
                      <header
                        className="MuiPaper-root MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary mui-fixed MuiPaper-elevation4"
                        style={
                          Object {
                            "visibility": undefined,
                          }
                        }
                      >
                        <WithStyles(ForwardRef(Toolbar))>
                          <ForwardRef(Toolbar)
                            classes={
                              Object {
                                "dense": "MuiToolbar-dense",
                                "gutters": "MuiToolbar-gutters",
                                "regular": "MuiToolbar-regular",
                                "root": "MuiToolbar-root",
                              }
                            }
                          >
                            <div
                              className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                            >
                              <styled.div>
                                <div
                                  className="c1"
                                >
                                  <styled.img
                                    src="spotifood.png"
                                  >
                                    <img
                                      className="c2"
                                      src="spotifood.png"
                                    />
                                  </styled.img>
                                </div>
                              </styled.div>
                              <WithStyles(ForwardRef(Button))
                                color="primary"
                                variant="contained"
                              >
                                <ForwardRef(Button)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiButton-colorInherit",
                                      "contained": "MuiButton-contained",
                                      "containedPrimary": "MuiButton-containedPrimary",
                                      "containedSecondary": "MuiButton-containedSecondary",
                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                      "disableElevation": "MuiButton-disableElevation",
                                      "disabled": "Mui-disabled",
                                      "endIcon": "MuiButton-endIcon",
                                      "focusVisible": "Mui-focusVisible",
                                      "fullWidth": "MuiButton-fullWidth",
                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                      "label": "MuiButton-label",
                                      "outlined": "MuiButton-outlined",
                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                      "root": "MuiButton-root",
                                      "sizeLarge": "MuiButton-sizeLarge",
                                      "sizeSmall": "MuiButton-sizeSmall",
                                      "startIcon": "MuiButton-startIcon",
                                      "text": "MuiButton-text",
                                      "textPrimary": "MuiButton-textPrimary",
                                      "textSecondary": "MuiButton-textSecondary",
                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                    }
                                  }
                                  color="primary"
                                  variant="contained"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible"
                                    type="button"
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="button"
                                      disabled={false}
                                      focusRipple={true}
                                      focusVisibleClassName="Mui-focusVisible"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiButton-label"
                                        >
                                          Logout
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Button)>
                              </WithStyles(ForwardRef(Button))>
                            </div>
                          </ForwardRef(Toolbar)>
                        </WithStyles(ForwardRef(Toolbar))>
                      </header>
                    </ForwardRef(Paper)>
                  </WithStyles(ForwardRef(Paper))>
                </ForwardRef(AppBar)>
              </WithStyles(ForwardRef(AppBar))>
            </Transition>
          </ForwardRef(Slide)>
        </HideOnScroll>
      </Header>
      <styled.div>
        <div
          className="c3"
        >
          <Loading>
            <styled.div>
              <div
                className="c4"
              >
                <WithStyles(ForwardRef(CircularProgress))>
                  <ForwardRef(CircularProgress)
                    classes={
                      Object {
                        "circle": "MuiCircularProgress-circle",
                        "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
                        "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
                        "circleStatic": "MuiCircularProgress-circleStatic",
                        "colorPrimary": "MuiCircularProgress-colorPrimary",
                        "colorSecondary": "MuiCircularProgress-colorSecondary",
                        "indeterminate": "MuiCircularProgress-indeterminate",
                        "root": "MuiCircularProgress-root",
                        "static": "MuiCircularProgress-static",
                        "svg": "MuiCircularProgress-svg",
                      }
                    }
                  >
                    <div
                      className="MuiCircularProgress-root MuiCircularProgress-colorPrimary MuiCircularProgress-indeterminate"
                      role="progressbar"
                      style={
                        Object {
                          "height": 40,
                          "width": 40,
                        }
                      }
                    >
                      <svg
                        className="MuiCircularProgress-svg"
                        viewBox="22 22 44 44"
                      >
                        <circle
                          className="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate"
                          cx={44}
                          cy={44}
                          fill="none"
                          r={20.2}
                          strokeWidth={3.6}
                          style={Object {}}
                        />
                      </svg>
                    </div>
                  </ForwardRef(CircularProgress)>
                </WithStyles(ForwardRef(CircularProgress))>
                <WithStyles(ForwardRef(Typography))
                  color="textSecondary"
                >
                  <ForwardRef(Typography)
                    classes={
                      Object {
                        "alignCenter": "MuiTypography-alignCenter",
                        "alignJustify": "MuiTypography-alignJustify",
                        "alignLeft": "MuiTypography-alignLeft",
                        "alignRight": "MuiTypography-alignRight",
                        "body1": "MuiTypography-body1",
                        "body2": "MuiTypography-body2",
                        "button": "MuiTypography-button",
                        "caption": "MuiTypography-caption",
                        "colorError": "MuiTypography-colorError",
                        "colorInherit": "MuiTypography-colorInherit",
                        "colorPrimary": "MuiTypography-colorPrimary",
                        "colorSecondary": "MuiTypography-colorSecondary",
                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                        "displayBlock": "MuiTypography-displayBlock",
                        "displayInline": "MuiTypography-displayInline",
                        "gutterBottom": "MuiTypography-gutterBottom",
                        "h1": "MuiTypography-h1",
                        "h2": "MuiTypography-h2",
                        "h3": "MuiTypography-h3",
                        "h4": "MuiTypography-h4",
                        "h5": "MuiTypography-h5",
                        "h6": "MuiTypography-h6",
                        "noWrap": "MuiTypography-noWrap",
                        "overline": "MuiTypography-overline",
                        "paragraph": "MuiTypography-paragraph",
                        "root": "MuiTypography-root",
                        "srOnly": "MuiTypography-srOnly",
                        "subtitle1": "MuiTypography-subtitle1",
                        "subtitle2": "MuiTypography-subtitle2",
                      }
                    }
                    color="textSecondary"
                  >
                    <p
                      className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                    >
                      Loading...
                    </p>
                  </ForwardRef(Typography)>
                </WithStyles(ForwardRef(Typography))>
              </div>
            </styled.div>
          </Loading>
        </div>
      </styled.div>
    </div>
  </styled.div>
</Playlist>
`;
