{"ast":null,"code":"var _jsxFileName = \"/home/gimenezes/projects/ifood-frontend-test/src/Hooks/themes.tsx\";\nimport React, { createContext, useState, useContext } from \"react\";\nimport ifood from \"../Styles/Themes/ifood\";\nimport spotify from \"../Styles/Themes/spotify\";\nconst ThemeContext = createContext({});\n\nconst ThemeProvider = ({\n  children\n}) => {\n  const [theme, setTheme] = useState(() => {\n    const themeSaved = localStorage.getItem('@spotifood:theme');\n\n    if (themeSaved) {\n      return JSON.parse(themeSaved);\n    } else {\n      return spotify;\n    }\n  });\n\n  const toggleTheme = () => {\n    if (theme.title === \"Spotify\") {\n      setTheme(ifood);\n      localStorage.setItem('@spotifood:theme', JSON.stringify(ifood));\n    } else {\n      setTheme(spotify);\n      localStorage.setItem('@spotifood:theme', JSON.stringify(spotify));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      toggleTheme,\n      theme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n  return context;\n}\n\nexport { ThemeProvider, useTheme };","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Hooks/themes.tsx"],"names":["React","createContext","useState","useContext","ifood","spotify","ThemeContext","ThemeProvider","children","theme","setTheme","themeSaved","localStorage","getItem","JSON","parse","toggleTheme","title","setItem","stringify","useTheme","context"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AAEA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAyBA,MAAMC,YAAY,GAAGL,aAAa,CAAgB,EAAhB,CAAlC;;AAEA,MAAMM,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAS,MAAM;AAC/C,UAAMS,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAnB;;AACA,QAAIF,UAAJ,EAAgB;AACd,aAAOG,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAP;AACD,KAFD,MAEO;AACL,aAAON,OAAP;AACD;AACF,GAPiC,CAAlC;;AASA,QAAMW,WAAW,GAAG,MAAM;AACxB,QAAIP,KAAK,CAACQ,KAAN,KAAgB,SAApB,EAA+B;AAC7BP,MAAAA,QAAQ,CAACN,KAAD,CAAR;AACAQ,MAAAA,YAAY,CAACM,OAAb,CAAqB,kBAArB,EAAyCJ,IAAI,CAACK,SAAL,CAAef,KAAf,CAAzC;AACD,KAHD,MAGO;AACLM,MAAAA,QAAQ,CAACL,OAAD,CAAR;AACAO,MAAAA,YAAY,CAACM,OAAb,CAAqB,kBAArB,EAAyCJ,IAAI,CAACK,SAAL,CAAed,OAAf,CAAzC;AACD;AACF,GARD;;AAUA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEW,MAAAA,WAAF;AAAeP,MAAAA;AAAf,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADF;AAKD,CAzBD;;AA2BA,SAASY,QAAT,GAAmC;AACjC,QAAMC,OAAO,GAAGlB,UAAU,CAACG,YAAD,CAA1B;AAEA,SAAOe,OAAP;AACD;;AAED,SAASd,aAAT,EAAwBa,QAAxB","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\n\nimport ifood from \"../Styles/Themes/ifood\";\nimport spotify from \"../Styles/Themes/spotify\";\n\n\ninterface IThemeContext {\n  toggleTheme(): void;\n  theme: ITheme;\n}\n\ninterface ITheme {\n    title: string;\n\n    colors: {\n        first: string;\n      second: string;\n      third: string;\n\n        white: string;\n        black: string;\n        gray: string;\n\n        on: string;\n        off: string;\n  };\n}\n\nconst ThemeContext = createContext<IThemeContext>({} as IThemeContext);\n\nconst ThemeProvider: React.FC = ({ children }) => {\n  const [theme, setTheme] = useState<ITheme>(() => {\n    const themeSaved = localStorage.getItem('@spotifood:theme');\n    if (themeSaved) {\n      return JSON.parse(themeSaved);\n    } else {\n      return spotify\n    }\n  });\n\n  const toggleTheme = () => {\n    if (theme.title === \"Spotify\") {\n      setTheme(ifood);\n      localStorage.setItem('@spotifood:theme', JSON.stringify(ifood));\n    } else {\n      setTheme(spotify);\n      localStorage.setItem('@spotifood:theme', JSON.stringify(spotify));\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ toggleTheme, theme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nfunction useTheme(): IThemeContext {\n  const context = useContext(ThemeContext);\n\n  return context;\n}\n\nexport { ThemeProvider, useTheme };\n"]},"metadata":{},"sourceType":"module"}