{"ast":null,"code":"var _jsxFileName = \"/home/gimenezes/projects/ifood-frontend-test/src/Hooks/auth.tsx\";\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport getToken from '../Utils/getToken';\nimport authenticate from '../Services/authenticateService';\nconst AuthContext = createContext({});\n\nconst AuthProvider = ({\n  children\n}) => {\n  const [token, setToken] = useState(() => {\n    const storedToken = localStorage.getItem('@Spotifood:token');\n\n    if (storedToken) {\n      return storedToken;\n    }\n\n    return null;\n  });\n  const location = useLocation();\n  useEffect(() => {\n    if (!token) {\n      const {\n        accessToken,\n        expiresIn\n      } = getToken(location.hash);\n\n      if (accessToken) {\n        const expiresAt = new Date();\n        expiresAt.setSeconds(expiresAt.getSeconds() + expiresIn);\n        localStorage.setItem('@Spotifood:token', accessToken);\n        localStorage.setItem('@Spotifood:expiresAt', expiresAt.toString());\n        setToken(accessToken);\n      }\n    } else {\n      const currentDate = new Date();\n      const expiresAt = localStorage.getItem('@Spotifood:expiresAt');\n\n      if (expiresAt && currentDate.getTime() > Date.parse(expiresAt.toString())) {\n        localStorage.removeItem('@Spotifood:token');\n        localStorage.removeItem('@Spotifood:expiresAt');\n        authenticate();\n      }\n    }\n\n    if (window.location.hash !== '') {\n      window.location.hash = '';\n    }\n  }, [token, location]);\n\n  const signOut = () => {\n    localStorage.removeItem(\"@Spotifood:token\");\n    localStorage.removeItem(\"@Spotifood:expiresAt\");\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      token,\n      signOut\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Hooks/auth.tsx"],"names":["React","createContext","useContext","useEffect","useState","useLocation","getToken","authenticate","AuthContext","AuthProvider","children","token","setToken","storedToken","localStorage","getItem","location","accessToken","expiresIn","hash","expiresAt","Date","setSeconds","getSeconds","setItem","toString","currentDate","getTime","parse","removeItem","window","signOut","useAuth","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AAWA,MAAMC,WAAW,GAAGP,aAAa,CAAkB,EAAlB,CAAjC;;AAEA,MAAMQ,YAAyC,GAAG,CAAC;AACjDC,EAAAA;AADiD,CAAD,KAEzB;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,MAAM;AACvC,UAAMS,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAApB;;AAEA,QAAIF,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AAED,WAAO,IAAP;AACD,GARiC,CAAlC;AAUA,QAAMG,QAAQ,GAAGX,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,KAAL,EAAY;AACV,YAAM;AAAEM,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAA6BZ,QAAQ,CACzCU,QAAQ,CAACG,IADgC,CAA3C;;AAIA,UAAIF,WAAJ,EAAiB;AACf,cAAMG,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACAD,QAAAA,SAAS,CAACE,UAAV,CAAqBF,SAAS,CAACG,UAAV,KAAyBL,SAA9C;AAEAJ,QAAAA,YAAY,CAACU,OAAb,CAAqB,kBAArB,EAAyCP,WAAzC;AACAH,QAAAA,YAAY,CAACU,OAAb,CAAqB,sBAArB,EAA6CJ,SAAS,CAACK,QAAV,EAA7C;AAEAb,QAAAA,QAAQ,CAACK,WAAD,CAAR;AACD;AACF,KAdD,MAcO;AACL,YAAMS,WAAW,GAAG,IAAIL,IAAJ,EAApB;AACA,YAAMD,SAAS,GAAGN,YAAY,CAACC,OAAb,CAAqB,sBAArB,CAAlB;;AAEA,UACEK,SAAS,IACTM,WAAW,CAACC,OAAZ,KAAwBN,IAAI,CAACO,KAAL,CAAWR,SAAS,CAACK,QAAV,EAAX,CAF1B,EAGE;AACAX,QAAAA,YAAY,CAACe,UAAb,CAAwB,kBAAxB;AACAf,QAAAA,YAAY,CAACe,UAAb,CAAwB,sBAAxB;AAEAtB,QAAAA,YAAY;AACb;AACF;;AAED,QAAIuB,MAAM,CAACd,QAAP,CAAgBG,IAAhB,KAAyB,EAA7B,EAAiC;AAC/BW,MAAAA,MAAM,CAACd,QAAP,CAAgBG,IAAhB,GAAuB,EAAvB;AACD;AACF,GAjCQ,EAiCN,CAACR,KAAD,EAAQK,QAAR,CAjCM,CAAT;;AAmCA,QAAMe,OAAO,GAAG,MAAM;AACpBjB,IAAAA,YAAY,CAACe,UAAb,CAAwB,kBAAxB;AACAf,IAAAA,YAAY,CAACe,UAAb,CAAwB,sBAAxB;AACD,GAHD;;AAKA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAElB,MAAAA,KAAF;AAASoB,MAAAA;AAAT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkDrB,QAAlD,CADF;AAGD,CA1DD;;AA4DA,SAASsB,OAAT,GAAoC;AAClC,QAAMC,OAAO,GAAG/B,UAAU,CAACM,WAAD,CAA1B;;AAEA,MAAI,CAACyB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;AAED,SAASxB,YAAT,EAAuBuB,OAAvB","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport getToken from '../Utils/getToken';\nimport authenticate from '../Services/authenticateService';\n\ninterface AuthContextData {\n  token?: string | null;\n  signOut(): void;\n}\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nconst AuthProvider: React.FC<AuthProviderProps> = ({\n  children,\n}: AuthProviderProps) => {\n  const [token, setToken] = useState(() => {\n    const storedToken = localStorage.getItem('@Spotifood:token');\n\n    if (storedToken) {\n      return storedToken;\n    }\n\n    return null;\n  });\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!token) {\n      const { accessToken, expiresIn } = getToken(\n        location.hash,\n      );\n\n      if (accessToken) {\n        const expiresAt = new Date();\n        expiresAt.setSeconds(expiresAt.getSeconds() + expiresIn);\n\n        localStorage.setItem('@Spotifood:token', accessToken);\n        localStorage.setItem('@Spotifood:expiresAt', expiresAt.toString());\n\n        setToken(accessToken);\n      }\n    } else {\n      const currentDate = new Date();\n      const expiresAt = localStorage.getItem('@Spotifood:expiresAt');\n\n      if (\n        expiresAt &&\n        currentDate.getTime() > Date.parse(expiresAt.toString())\n      ) {\n        localStorage.removeItem('@Spotifood:token');\n        localStorage.removeItem('@Spotifood:expiresAt');\n\n        authenticate();\n      }\n    }\n\n    if (window.location.hash !== '') {\n      window.location.hash = '';\n    }\n  }, [token, location]);\n\n  const signOut = () => {\n    localStorage.removeItem(\"@Spotifood:token\");\n    localStorage.removeItem(\"@Spotifood:expiresAt\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, signOut }}>{children}</AuthContext.Provider>\n  );\n};\n\nfunction useAuth(): AuthContextData {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };\n"]},"metadata":{},"sourceType":"module"}