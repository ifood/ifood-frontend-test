{"ast":null,"code":"import _slicedToArray from\"/home/gimenezes/projects/ifood-frontend-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useState,useContext}from\"react\";import ifood from\"../Styles/Themes/ifood\";import spotify from\"../Styles/Themes/spotify\";var ThemeContext=createContext({});var ThemeProvider=function ThemeProvider(_ref){var children=_ref.children;var _useState=useState(function(){var themeSaved=localStorage.getItem('@spotifood:theme');if(themeSaved){return JSON.parse(themeSaved);}else{return spotify;}}),_useState2=_slicedToArray(_useState,2),theme=_useState2[0],setTheme=_useState2[1];var toggleTheme=function toggleTheme(){if(theme.title===\"Spotify\"){setTheme(ifood);localStorage.setItem('@spotifood:theme',JSON.stringify(ifood));}else{setTheme(spotify);localStorage.setItem('@spotifood:theme',JSON.stringify(spotify));}};return/*#__PURE__*/React.createElement(ThemeContext.Provider,{value:{toggleTheme:toggleTheme,theme:theme}},children);};function useTheme(){var context=useContext(ThemeContext);return context;}export{ThemeProvider,useTheme};","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Hooks/themes.tsx"],"names":["React","createContext","useState","useContext","ifood","spotify","ThemeContext","ThemeProvider","children","themeSaved","localStorage","getItem","JSON","parse","theme","setTheme","toggleTheme","title","setItem","stringify","useTheme","context"],"mappings":"mKAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,QAA/B,CAAyCC,UAAzC,KAA2D,OAA3D,CAEA,MAAOC,CAAAA,KAAP,KAAkB,wBAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,0BAApB,CAyBA,GAAMC,CAAAA,YAAY,CAAGL,aAAa,CAAgB,EAAhB,CAAlC,CAEA,GAAMM,CAAAA,aAAuB,CAAG,QAA1BA,CAAAA,aAA0B,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACtBN,QAAQ,CAAS,UAAM,CAC/C,GAAMO,CAAAA,UAAU,CAAGC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAnB,CACA,GAAIF,UAAJ,CAAgB,CACd,MAAOG,CAAAA,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAP,CACD,CAFD,IAEO,CACL,MAAOJ,CAAAA,OAAP,CACD,CACF,CAPiC,CADc,wCACzCS,KADyC,eAClCC,QADkC,eAUhD,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAIF,KAAK,CAACG,KAAN,GAAgB,SAApB,CAA+B,CAC7BF,QAAQ,CAACX,KAAD,CAAR,CACAM,YAAY,CAACQ,OAAb,CAAqB,kBAArB,CAAyCN,IAAI,CAACO,SAAL,CAAef,KAAf,CAAzC,EACD,CAHD,IAGO,CACLW,QAAQ,CAACV,OAAD,CAAR,CACAK,YAAY,CAACQ,OAAb,CAAqB,kBAArB,CAAyCN,IAAI,CAACO,SAAL,CAAed,OAAf,CAAzC,EACD,CACF,CARD,CAUA,mBACE,oBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEW,WAAW,CAAXA,WAAF,CAAeF,KAAK,CAALA,KAAf,CAA9B,EACGN,QADH,CADF,CAKD,CAzBD,CA2BA,QAASY,CAAAA,QAAT,EAAmC,CACjC,GAAMC,CAAAA,OAAO,CAAGlB,UAAU,CAACG,YAAD,CAA1B,CAEA,MAAOe,CAAAA,OAAP,CACD,CAED,OAASd,aAAT,CAAwBa,QAAxB","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\n\nimport ifood from \"../Styles/Themes/ifood\";\nimport spotify from \"../Styles/Themes/spotify\";\n\n\ninterface IThemeContext {\n  toggleTheme(): void;\n  theme: ITheme;\n}\n\ninterface ITheme {\n    title: string;\n\n    colors: {\n        first: string;\n      second: string;\n      third: string;\n\n        white: string;\n        black: string;\n        gray: string;\n\n        on: string;\n        off: string;\n  };\n}\n\nconst ThemeContext = createContext<IThemeContext>({} as IThemeContext);\n\nconst ThemeProvider: React.FC = ({ children }) => {\n  const [theme, setTheme] = useState<ITheme>(() => {\n    const themeSaved = localStorage.getItem('@spotifood:theme');\n    if (themeSaved) {\n      return JSON.parse(themeSaved);\n    } else {\n      return spotify\n    }\n  });\n\n  const toggleTheme = () => {\n    if (theme.title === \"Spotify\") {\n      setTheme(ifood);\n      localStorage.setItem('@spotifood:theme', JSON.stringify(ifood));\n    } else {\n      setTheme(spotify);\n      localStorage.setItem('@spotifood:theme', JSON.stringify(spotify));\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ toggleTheme, theme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nfunction useTheme(): IThemeContext {\n  const context = useContext(ThemeContext);\n\n  return context;\n}\n\nexport { ThemeProvider, useTheme };\n"]},"metadata":{},"sourceType":"module"}