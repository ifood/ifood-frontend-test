{"ast":null,"code":"import _slicedToArray from\"/home/gimenezes/projects/ifood-frontend-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useCallback,useContext,useState}from\"react\";var FilterContext=createContext({});var FilterProvider=function FilterProvider(_ref){var children=_ref.children;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),filter=_useState2[0],setFilter=_useState2[1];var updateFilter=useCallback(function(updatedFilter){setFilter(updatedFilter);},[]);return/*#__PURE__*/React.createElement(FilterContext.Provider,{value:{filter:filter,updateFilter:updateFilter}},children);};function useFilter(){var context=useContext(FilterContext);if(!context){throw new Error(\"useFilter must be used within an AuthProvider\");}return context;}export{FilterProvider,useFilter};","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Hooks/playlistsHook.tsx"],"names":["React","createContext","useCallback","useContext","useState","FilterContext","FilterProvider","children","filter","setFilter","updateFilter","updatedFilter","useFilter","context","Error"],"mappings":"mKAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,WAA/B,CAA4CC,UAA5C,CAAwDC,QAAxD,KAAwE,OAAxE,CAaA,GAAMC,CAAAA,aAAa,CAAGJ,aAAa,CAAiB,EAAjB,CAAnC,CAEA,GAAMK,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAE3B,IADzBC,CAAAA,QACyB,MADzBA,QACyB,eACGH,QAAQ,CAAe,EAAf,CADX,wCAClBI,MADkB,eACVC,SADU,eAGzB,GAAMC,CAAAA,YAAY,CAAGR,WAAW,CAAC,SAACS,aAAD,CAAiC,CAChEF,SAAS,CAACE,aAAD,CAAT,CACD,CAF+B,CAE7B,EAF6B,CAAhC,CAIA,mBACE,oBAAC,aAAD,CAAe,QAAf,EAAwB,KAAK,CAAE,CAAEH,MAAM,CAANA,MAAF,CAAUE,YAAY,CAAZA,YAAV,CAA/B,EACGH,QADH,CADF,CAKD,CAdD,CAgBA,QAASK,CAAAA,SAAT,EAAqC,CACnC,GAAMC,CAAAA,OAAO,CAAGV,UAAU,CAACE,aAAD,CAA1B,CAEA,GAAI,CAACQ,OAAL,CAAc,CACZ,KAAM,IAAIC,CAAAA,KAAJ,CAAU,+CAAV,CAAN,CACD,CAED,MAAOD,CAAAA,OAAP,CACD,CAED,OAASP,cAAT,CAAyBM,SAAzB","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from \"react\";\n\nimport { IFilterQuery } from \"../Services/spotifyService\";\n\ninterface IFilterContext {\n  filter?: IFilterQuery;\n  updateFilter(updatedFilter: IFilterQuery): void;\n}\n\ninterface IFilterContextProps {\n  children: React.ReactNode;\n}\n\nconst FilterContext = createContext<IFilterContext>({} as IFilterContext);\n\nconst FilterProvider: React.FC<IFilterContextProps> = ({\n  children,\n}: IFilterContextProps) => {\n  const [filter, setFilter] = useState<IFilterQuery>({} as IFilterQuery);\n\n  const updateFilter = useCallback((updatedFilter: IFilterQuery) => {\n    setFilter(updatedFilter);\n  }, []);\n\n  return (\n    <FilterContext.Provider value={{ filter, updateFilter }}>\n      {children}\n    </FilterContext.Provider>\n  );\n};\n\nfunction useFilter(): IFilterContext {\n  const context = useContext(FilterContext);\n\n  if (!context) {\n    throw new Error(\"useFilter must be used within an AuthProvider\");\n  }\n\n  return context;\n}\n\nexport { FilterProvider, useFilter };\n"]},"metadata":{},"sourceType":"module"}