{"ast":null,"code":"var _jsxFileName = \"/home/gimenezes/projects/ifood-frontend-test/src/Hooks/playlistsHook.tsx\";\nimport React, { createContext, useCallback, useContext, useState } from \"react\";\nconst FilterContext = createContext({});\n\nconst FilterProvider = ({\n  children\n}) => {\n  const [filter, setFilter] = useState({});\n  const updateFilter = useCallback(updatedFilter => {\n    setFilter(updatedFilter);\n  }, []);\n  return /*#__PURE__*/React.createElement(FilterContext.Provider, {\n    value: {\n      filter,\n      updateFilter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useFilter() {\n  const context = useContext(FilterContext);\n\n  if (!context) {\n    throw new Error(\"useFilter must be used within an AuthProvider\");\n  }\n\n  return context;\n}\n\nexport { FilterProvider, useFilter };","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Hooks/playlistsHook.tsx"],"names":["React","createContext","useCallback","useContext","useState","FilterContext","FilterProvider","children","filter","setFilter","updateFilter","updatedFilter","useFilter","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AAaA,MAAMC,aAAa,GAAGJ,aAAa,CAAiB,EAAjB,CAAnC;;AAEA,MAAMK,cAA6C,GAAG,CAAC;AACrDC,EAAAA;AADqD,CAAD,KAE3B;AACzB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAe,EAAf,CAApC;AAEA,QAAMM,YAAY,GAAGR,WAAW,CAAES,aAAD,IAAiC;AAChEF,IAAAA,SAAS,CAACE,aAAD,CAAT;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEH,MAAAA,MAAF;AAAUE,MAAAA;AAAV,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADF;AAKD,CAdD;;AAgBA,SAASK,SAAT,GAAqC;AACnC,QAAMC,OAAO,GAAGV,UAAU,CAACE,aAAD,CAA1B;;AAEA,MAAI,CAACQ,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;AAED,SAASP,cAAT,EAAyBM,SAAzB","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from \"react\";\n\nimport { IFilterQuery } from \"../Services/spotifyService\";\n\ninterface IFilterContext {\n  filter?: IFilterQuery;\n  updateFilter(updatedFilter: IFilterQuery): void;\n}\n\ninterface IFilterContextProps {\n  children: React.ReactNode;\n}\n\nconst FilterContext = createContext<IFilterContext>({} as IFilterContext);\n\nconst FilterProvider: React.FC<IFilterContextProps> = ({\n  children,\n}: IFilterContextProps) => {\n  const [filter, setFilter] = useState<IFilterQuery>({} as IFilterQuery);\n\n  const updateFilter = useCallback((updatedFilter: IFilterQuery) => {\n    setFilter(updatedFilter);\n  }, []);\n\n  return (\n    <FilterContext.Provider value={{ filter, updateFilter }}>\n      {children}\n    </FilterContext.Provider>\n  );\n};\n\nfunction useFilter(): IFilterContext {\n  const context = useContext(FilterContext);\n\n  if (!context) {\n    throw new Error(\"useFilter must be used within an AuthProvider\");\n  }\n\n  return context;\n}\n\nexport { FilterProvider, useFilter };\n"]},"metadata":{},"sourceType":"module"}