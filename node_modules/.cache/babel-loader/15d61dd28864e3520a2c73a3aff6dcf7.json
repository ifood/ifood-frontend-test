{"ast":null,"code":"import _regeneratorRuntime from\"/home/gimenezes/projects/ifood-frontend-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/gimenezes/projects/ifood-frontend-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/gimenezes/projects/ifood-frontend-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import applyMask from'../Utils/applyMask';export var getFeaturePlaylists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(token,filter){var params,response,items;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:params={};if(filter===null||filter===void 0?void 0:filter.locale){params.locale=filter.locale;}if(filter===null||filter===void 0?void 0:filter.country){params.country=filter.country;}if(filter===null||filter===void 0?void 0:filter.timestamp){params.timestamp=filter.timestamp.toISOString();}if(filter===null||filter===void 0?void 0:filter.limit){params.limit=filter.limit;}if(filter===null||filter===void 0?void 0:filter.offset){params.offset=filter.offset;}_context.next=8;return axios.get('https://api.spotify.com/v1/browse/featured-playlists',{params:params,headers:{Authorization:\"Bearer \".concat(token)}});case 8:response=_context.sent;items=response.data.playlists.items;return _context.abrupt(\"return\",items.map(function(item){return _objectSpread({},item,{description:applyMask(item.description)});}));case 11:case\"end\":return _context.stop();}}},_callee);}));return function getFeaturePlaylists(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Services/spotifyService.ts"],"names":["axios","applyMask","getFeaturePlaylists","token","filter","params","locale","country","timestamp","toISOString","limit","offset","get","headers","Authorization","response","items","data","playlists","map","item","description"],"mappings":"qeAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,oBAAtB,CA4BA,MAAO,IAAMC,CAAAA,mBAAmB,0FAAG,iBACjCC,KADiC,CAEjCC,MAFiC,4IAI3BC,MAJ2B,CAIlB,EAJkB,CAMjC,GAAID,MAAJ,SAAIA,MAAJ,iBAAIA,MAAM,CAAEE,MAAZ,CAAoB,CAClBD,MAAM,CAACC,MAAP,CAAgBF,MAAM,CAACE,MAAvB,CACD,CACD,GAAIF,MAAJ,SAAIA,MAAJ,iBAAIA,MAAM,CAAEG,OAAZ,CAAqB,CACnBF,MAAM,CAACE,OAAP,CAAiBH,MAAM,CAACG,OAAxB,CACD,CACD,GAAIH,MAAJ,SAAIA,MAAJ,iBAAIA,MAAM,CAAEI,SAAZ,CAAuB,CACrBH,MAAM,CAACG,SAAP,CAAmBJ,MAAM,CAACI,SAAP,CAAiBC,WAAjB,EAAnB,CACD,CACD,GAAIL,MAAJ,SAAIA,MAAJ,iBAAIA,MAAM,CAAEM,KAAZ,CAAmB,CACjBL,MAAM,CAACK,KAAP,CAAeN,MAAM,CAACM,KAAtB,CACD,CACD,GAAIN,MAAJ,SAAIA,MAAJ,iBAAIA,MAAM,CAAEO,MAAZ,CAAoB,CAClBN,MAAM,CAACM,MAAP,CAAgBP,MAAM,CAACO,MAAvB,CACD,CApBgC,sBAsBVX,CAAAA,KAAK,CAACY,GAAN,CACrB,sDADqB,CAErB,CACEP,MAAM,CAANA,MADF,CAEEQ,OAAO,CAAE,CACPC,aAAa,kBAAYX,KAAZ,CADN,CAFX,CAFqB,CAtBU,QAsB3BY,QAtB2B,eAgCzBC,KAhCyB,CAgCfD,QAAQ,CAACE,IAAT,CAAcC,SAhCC,CAgCzBF,KAhCyB,iCAkC1BA,KAAK,CAACG,GAAN,CAAU,SAACC,IAAD,0BACZA,IADY,EAEfC,WAAW,CAAEpB,SAAS,CAACmB,IAAI,CAACC,WAAN,CAFP,IAAV,CAlC0B,yDAAH,kBAAnBnB,CAAAA,mBAAmB,gDAAzB","sourcesContent":["import axios from 'axios';\n\nimport applyMask from '../Utils/applyMask';\n\nexport interface IFilterQuery {\n  locale?: string;\n  country?: string;\n  timestamp?: Date | null;\n  limit?: string;\n  offset?: string;\n}\n\nexport interface IPlaylistItem {\n  description: string;\n  external_urls: {\n    spotify: string;\n  };\n  images: IPlaylistItemImage[];\n  id: string;\n  name: string;\n}\n\ninterface IPlaylistItemImage {\n  url: string;\n}\n\ninterface IQueryParams {\n  [key: string]: string;\n}\n\nexport const getFeaturePlaylists = async (\n  token: string,\n  filter?: IFilterQuery,\n): Promise<IPlaylistItem[]> => {\n  const params = {} as IQueryParams;\n\n  if (filter?.locale) {\n    params.locale = filter.locale;\n  }\n  if (filter?.country) {\n    params.country = filter.country;\n  }\n  if (filter?.timestamp) {\n    params.timestamp = filter.timestamp.toISOString();\n  }\n  if (filter?.limit) {\n    params.limit = filter.limit;\n  }\n  if (filter?.offset) {\n    params.offset = filter.offset;\n  }\n\n  const response = await axios.get(\n    'https://api.spotify.com/v1/browse/featured-playlists',\n    {\n      params,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    },\n  );\n\n  const { items } = response.data.playlists;\n\n  return items.map((item: IPlaylistItem) => ({\n    ...item,\n    description: applyMask(item.description),\n  }));\n};\n"]},"metadata":{},"sourceType":"module"}