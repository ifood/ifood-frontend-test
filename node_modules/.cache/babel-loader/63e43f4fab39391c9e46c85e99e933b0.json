{"ast":null,"code":"import axios from 'axios';\nimport applyMask from '../Utils/applyMask';\nexport const getFeaturePlaylists = async (token, filter) => {\n  const params = {};\n\n  if (filter === null || filter === void 0 ? void 0 : filter.locale) {\n    params.locale = filter.locale;\n  }\n\n  if (filter === null || filter === void 0 ? void 0 : filter.country) {\n    params.country = filter.country;\n  }\n\n  if (filter === null || filter === void 0 ? void 0 : filter.timestamp) {\n    params.timestamp = filter.timestamp.toISOString();\n  }\n\n  if (filter === null || filter === void 0 ? void 0 : filter.limit) {\n    params.limit = filter.limit;\n  }\n\n  if (filter === null || filter === void 0 ? void 0 : filter.offset) {\n    params.offset = filter.offset;\n  }\n\n  const response = await axios.get('https://api.spotify.com/v1/browse/featured-playlists', {\n    params,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const {\n    items\n  } = response.data.playlists;\n  return items.map(item => ({ ...item,\n    description: applyMask(item.description)\n  }));\n};","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Services/spotifyService.ts"],"names":["axios","applyMask","getFeaturePlaylists","token","filter","params","locale","country","timestamp","toISOString","limit","offset","response","get","headers","Authorization","items","data","playlists","map","item","description"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AA4BA,OAAO,MAAMC,mBAAmB,GAAG,OACjCC,KADiC,EAEjCC,MAFiC,KAGJ;AAC7B,QAAMC,MAAM,GAAG,EAAf;;AAEA,MAAID,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEE,MAAZ,EAAoB;AAClBD,IAAAA,MAAM,CAACC,MAAP,GAAgBF,MAAM,CAACE,MAAvB;AACD;;AACD,MAAIF,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEG,OAAZ,EAAqB;AACnBF,IAAAA,MAAM,CAACE,OAAP,GAAiBH,MAAM,CAACG,OAAxB;AACD;;AACD,MAAIH,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEI,SAAZ,EAAuB;AACrBH,IAAAA,MAAM,CAACG,SAAP,GAAmBJ,MAAM,CAACI,SAAP,CAAiBC,WAAjB,EAAnB;AACD;;AACD,MAAIL,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEM,KAAZ,EAAmB;AACjBL,IAAAA,MAAM,CAACK,KAAP,GAAeN,MAAM,CAACM,KAAtB;AACD;;AACD,MAAIN,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEO,MAAZ,EAAoB;AAClBN,IAAAA,MAAM,CAACM,MAAP,GAAgBP,MAAM,CAACO,MAAvB;AACD;;AAED,QAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CACrB,sDADqB,EAErB;AACER,IAAAA,MADF;AAEES,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASZ,KAAM;AADxB;AAFX,GAFqB,CAAvB;AAUA,QAAM;AAAEa,IAAAA;AAAF,MAAYJ,QAAQ,CAACK,IAAT,CAAcC,SAAhC;AAEA,SAAOF,KAAK,CAACG,GAAN,CAAWC,IAAD,KAA0B,EACzC,GAAGA,IADsC;AAEzCC,IAAAA,WAAW,EAAEpB,SAAS,CAACmB,IAAI,CAACC,WAAN;AAFmB,GAA1B,CAAV,CAAP;AAID,CAtCM","sourcesContent":["import axios from 'axios';\n\nimport applyMask from '../Utils/applyMask';\n\nexport interface IFilterQuery {\n  locale?: string;\n  country?: string;\n  timestamp?: Date | null;\n  limit?: string;\n  offset?: string;\n}\n\nexport interface IPlaylistItem {\n  description: string;\n  external_urls: {\n    spotify: string;\n  };\n  images: IPlaylistItemImage[];\n  id: string;\n  name: string;\n}\n\ninterface IPlaylistItemImage {\n  url: string;\n}\n\ninterface IQueryParams {\n  [key: string]: string;\n}\n\nexport const getFeaturePlaylists = async (\n  token: string,\n  filter?: IFilterQuery,\n): Promise<IPlaylistItem[]> => {\n  const params = {} as IQueryParams;\n\n  if (filter?.locale) {\n    params.locale = filter.locale;\n  }\n  if (filter?.country) {\n    params.country = filter.country;\n  }\n  if (filter?.timestamp) {\n    params.timestamp = filter.timestamp.toISOString();\n  }\n  if (filter?.limit) {\n    params.limit = filter.limit;\n  }\n  if (filter?.offset) {\n    params.offset = filter.offset;\n  }\n\n  const response = await axios.get(\n    'https://api.spotify.com/v1/browse/featured-playlists',\n    {\n      params,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    },\n  );\n\n  const { items } = response.data.playlists;\n\n  return items.map((item: IPlaylistItem) => ({\n    ...item,\n    description: applyMask(item.description),\n  }));\n};\n"]},"metadata":{},"sourceType":"module"}